import { useTranslations } from 'next-intl'
import { useForm, WatchObserver } from 'react-hook-form'
import { debounce } from 'lodash'
import { useMemo } from 'react'

import { zodResolver } from '@/utils/zodResolver'
import { FILTER_CHANGE_DEBOUNCE_TIME } from '@/utils/enums'
import { USER_PERMISSIONS_OPTIONS } from '@/utils/helpers'
import FilterSelectField from '@/atoms/FilterSelectField/FilterSelectField'
import HookFormField from '@/components/HookFormField'
import FilterWithSearch from '@/components/FilterWithSearch/FilterWithSearch'
import { {{ pascalCase name }}FilterFormSchema } from '@/schemas/{{ camelCase name }}Schemas'
import { {{ pascalCase name }}FilterFormFields } from '@/components/{{ pascalCase name }}FilterForm/{{ pascalCase name }}FilterFormTypes'
import * as SC from './{{ pascalCase name }}FilterFormStyles'

type Props = {
	onChangeFilter: (values: {{ pascalCase name }}FilterFormFields) => void
	onClearSearch: () => void
}

const {{ pascalCase name }}FilterForm = (props: Props) => {
	const { onChangeFilter, onClearSearch } = props
	const t = useTranslations('components.{{ camelCase name }}FilterForm')

	const { control, watch, setFocus, setValue } = useForm<{{ pascalCase name }}FilterFormFields>({
		mode: 'onChange',
		resolver: zodResolver({{ pascalCase name }}FilterFormSchema),
		defaultValues: {
			roles: [],
			search: ''
		}
	})

	const debounceChangeFilter = useMemo(() => {
		return debounce<WatchObserver<{{ pascalCase name }}FilterFormFields>>((data, info) => {
			if (info.type === 'change') {
				onChangeFilter(data as {{ pascalCase name }}FilterFormFields)
			}
		}, FILTER_CHANGE_DEBOUNCE_TIME)
	}, [onChangeFilter])

	watch((data, info) => {
		debounceChangeFilter(data, info)
	})

	const handleClearSearch = () => {
		setValue('search', '')
		onClearSearch()
	}

	return (
		<FilterWithSearch setFocus={setFocus} control={control} onClearSearch={handleClearSearch} placeholder={t('search')}>
			<SC.Row wrap>
				<HookFormField
					control={control}
					name={'roles'}
					multiple
					component={FilterSelectField}
					label={t('roleLabel')}
					placeholder={t('rolePlaceholder')}
					options={USER_PERMISSIONS_OPTIONS()}
					allowClear
					showSearch
				/>
			</SC.Row>
		</FilterWithSearch>
	)
}

export default {{ pascalCase name }}FilterForm
