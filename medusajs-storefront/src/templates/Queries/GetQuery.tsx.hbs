import { useQuery, keepPreviousData } from '@tanstack/react-query'

// utils
import { getReq } from '@/utils/request'
import { MSG_TYPE, NOTIFICATION_TYPE, QUERY_KEYS } from '@/utils/enums'

// types
import { Paths } from '@/types/api'
import { useTranslations } from 'next-intl'
import { showNotifications } from '@/utils/tsxHelpers'

type Get{{  pascalCase (singular name) }}Payload = Paths.GetApiPathToEntityBy{{  pascalCase (singular name) }}Id.Responses.$200

const useGet{{  pascalCase (singular name) }} = ({{  camelCase (singular name) }}Id?: string) => {
	const t = useTranslations()
	return useQuery({
		queryKey: [QUERY_KEYS.API_GET_{{  upperCase (singular name) }}, {{  camelCase (singular name) }}Id],
		queryFn: async (): Promise<Get{{  pascalCase (singular name) }}Payload> => {
			if ({{  camelCase (singular name) }}Id) {
				const { data } = await getReq('/api/v1/{{ dashCase name }}/{ {{ camelCase (singular name) }}Id }', { {{ camelCase (singular name) }}Id })
				return data
			}
			// throw error
			showNotifications([{ type: MSG_TYPE.ERROR, message: t('hooks.error.missingId') }], NOTIFICATION_TYPE.NOTIFICATION)
			return Promise.reject(new Error(t('hooks.error.missingId')))
		},
		enabled: !!{{  camelCase (singular name) }}Id,
		placeholderData: keepPreviousData
	})
}

export default useGet{{  pascalCase (singular name) }}
