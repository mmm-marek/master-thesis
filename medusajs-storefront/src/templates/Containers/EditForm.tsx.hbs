import { useTranslations } from 'next-intl'
import { useForm, UseFormReset } from 'react-hook-form'

import InputField from '@/atoms/InputField/InputField'
import Button from '@/atoms/Button/Button'
import HookFormField from '@/components/HookFormField'
import { zodResolver } from '@/utils/zodResolver'
import { Edit{{ pascalCase (singular name) }}FormFields } from '@/containers/{{ camelCase name }}/components/Edit{{ pascalCase (singular name) }}Form/Edit{{ pascalCase (singular name) }}FormTypes'
import { Edit{{ pascalCase (singular name) }}FormSchema } from '@/schemas/{{ camelCase name }}Schemas'
import * as SC from './Edit{{pascalCase (singular name)}}FormStyles'

type Props = {
	onSubmit: (data: Edit{{ pascalCase (singular name) }}FormFields, reset: UseFormReset<Edit{{ pascalCase (singular name) }}FormFields>) => Promise<void>
	initValues?: Edit{{ pascalCase (singular name) }}FormFields
}

const Edit{{ pascalCase (singular name) }}Form = (props: Props) => {
	const { onSubmit, initValues } = props
	const t = useTranslations('components.edit{{ pascalCase (singular name) }}Form')

	const {
		control,
		reset,
		formState: { isSubmitting },
		handleSubmit
	} = useForm<Edit{{ pascalCase (singular name) }}FormFields>({
		mode: 'onChange',
		resolver: zodResolver(Edit{{ pascalCase (singular name) }}FormSchema),
		defaultValues: { name: '' },
		values: initValues
	})

	const handleFormSubmit = async (data: Edit{{ pascalCase (singular name) }}FormFields) => {
		await onSubmit({ ...data }, reset)
	}

	return (
		<SC.Form onSubmitCapture={handleSubmit(handleFormSubmit)}>
			<HookFormField
				label={t('nameLabel')}
				placeholder={t('namePlaceholder')}
				component={InputField}
				control={control}
				name={'name'}
				size={'large'}
				required
			/>
			<Button type={'primary'} size={'large'} htmlType='submit' block disabled={isSubmitting} loading={isSubmitting}>
				{t('submitButton')}
			</Button>
		</SC.Form>
	)
}

export default Edit{{ pascalCase (singular name) }}Form
