import { useRouter } from 'next/router'
import { useMemo } from 'react'
import { useQueryClient } from '@tanstack/react-query'

import { Paths } from '@/types/api'
import { PATHS, QUERY_KEYS } from '@/utils/enums'
import { useParseQuery } from '@/hooks/useQueryParser'
import Loading from '@/components/Loading/Loading'
import Error from '@/components/Error/Error'
import useGet{{ pascalCase (singular name) }} from '@/hooks/{{ camelCase name }}/useGet{{ pascalCase (singular name) }}'
import usePatch{{ pascalCase (singular name) }} from '@/hooks/{{ camelCase name }}/usePatch{{ pascalCase (singular name) }}'
import Edit{{ pascalCase (singular name) }}Form from '@/containers/{{ camelCase name }}/components/Edit{{ pascalCase (singular name) }}Form/Edit{{ pascalCase (singular name) }}Form'
import { Edit{{ pascalCase (singular name) }}FormFields } from '@/containers/{{ camelCase name }}/components/Edit{{ pascalCase (singular name) }}Form/Edit{{ pascalCase (singular name) }}FormTypes'
import useDelete{{ pascalCase (singular name) }} from '@/hooks/{{ camelCase name }}/useDelete{{ pascalCase (singular name) }}'
import { {{ pascalCase (singular name) }}QuerySchema } from '@/schemas/{{ camelCase name }}Schemas'

const {{ pascalCase (singular name) }}Edit = () => {
	const router = useRouter()
	const [query, setQueryParams] = useParseQuery({{ pascalCase (singular name) }}QuerySchema, router.query)
	const { {{ camelCase (singular name) }}Id } = query
	const { mutateAsync: update{{ pascalCase (singular name) }} } = usePatch{{ pascalCase (singular name) }}({{ camelCase (singular name) }}Id)
	const { isInitialLoading: isLoading, data, isError } = useGet{{ pascalCase (singular name) }}({{ camelCase (singular name) }}Id)
	const { mutateAsync: delete{{ pascalCase (singular name) }}, isLoading: isDeleting } = useDelete{{ pascalCase (singular name) }}()
	const queryClient = useQueryClient()

	const initValues = useMemo(() => {
		if (!data) return undefined
		return {
			name: data.name
		}
	}, [data?.name])

	const handleDelete = async () => {
		if (!{{ camelCase (singular name) }}Id) return
		try {
			await delete{{ pascalCase (singular name) }}({
				{{ camelCase (singular name) }}Id
			})
			router.push(PATHS.{{ upperCase name }}_LIST)
		} catch (e) {
			// empty error
		}
	}

	const handleSubmit = async (values: Edit{{ pascalCase (singular name) }}FormFields) => {
		try {
			const reqBody: Paths.PatchApiTo{{ pascalCase name }}{{ pascalCase (singular name) }}Id.RequestBody = {
				name: values.name
			}
			await update{{ pascalCase (singular name) }}(reqBody, {
				onSuccess: () => {
					queryClient.invalidateQueries({ queryKey: [QUERY_KEYS.API_GET_{{ upperCase (singular name) }}] })
				}
			})
		} catch {
			// empty catch
		}
	}

	if (isLoading) {
		return <Loading />
	}

	if (isError) {
		return <Error />
	}

	return (
		<div>
			<Edit{{ pascalCase (singular name) }}Form initValues={initValues} onSubmit={handleSubmit} />
		</div>
	)
}

export default {{ pascalCase (singular name) }}Edit
