import { useTranslations } from 'next-intl'
import { useForm, UseFormReset } from 'react-hook-form'

import InputField from '@/atoms/InputField/InputField'
import Button from '@/atoms/Button/Button'
import HookFormField from '@/components/HookFormField'
import { zodResolver } from '@/utils/zodResolver'
import { {{ pascalCase name}}FormFields } from '@/components/{{ pascalCase name }}Form/{{ pascalCase name }}FormTypes'
import { {{ pascalCase name }}FormSchema } from '@/schemas/{{ camelCase name }}Schemas'
import * as SC from './{{pascalCase name}}FormStyles'

type Props = {
	onSubmit: (data: {{ pascalCase name }}FormFields, reset: UseFormReset<{{ pascalCase name }}FormFields>) => Promise<void>
}

const {{ pascalCase name }}Form = (props: Props) => {
	const { onSubmit } = props
	const t = useTranslations('components.{{ camelCase name }}Form')

	const {
		control,
		reset,
		formState: { isSubmitting },
		handleSubmit
	} = useForm<{{ pascalCase name }}FormFields>({
		mode: 'onChange',
		resolver: zodResolver({{ pascalCase name }}FormSchema),
		defaultValues: { name: '' }
	})

	const handleFormSubmit = async (data: {{ pascalCase name }}FormFields) => {
		await onSubmit({ ...data }, reset)
	}

	return (
		<SC.Form onSubmitCapture={handleSubmit(handleFormSubmit)}>
			<HookFormField
				label={t('nameLabel')}
				placeholder={t('namePlaceholder')}
				component={InputField}
				control={control}
				name={'name'}
				size={'large'}
				required
			/>
			<Button type={'primary'} size={'large'} htmlType='submit' block disabled={isSubmitting} loading={isSubmitting}>
				{t('submitButton')}
			</Button>
		</SC.Form>
	)
}

export default {{ pascalCase name }}Form
